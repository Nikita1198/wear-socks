export default async function handler(req, res) {
  // Only allow POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  // Use environment variables if available, otherwise use provided values
  const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7208241425:AAFSu765qB4htNGqvim6xjYEsjd3DlNuaa8';
  const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '-1002537750230';

  try {
    const { name, city, contact, request, dataProcessing, newsletter, privacy } = req.body;

    // Validate required fields
    if (!name || !city || !contact || !request || !dataProcessing) {
      return res.status(400).json({ message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    // Format message for Telegram
    const message = `üî• *–ù–û–í–´–ô –ó–ê–ö–ê–ó –° –°–ê–ô–¢–ê*

üë§ *–ò–º—è:* ${name}
üèôÔ∏è *–ì–æ—Ä–æ–¥:* ${city}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${contact}
üìù *–ó–∞–ø—Ä–æ—Å:* ${request}

‚úÖ *–°–æ–≥–ª–∞—Å–∏—è:*
${dataProcessing ? '‚úÖ' : '‚ùå'} –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
${newsletter ? '‚úÖ' : '‚ùå'} –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
${privacy ? '‚úÖ' : '‚ùå'} –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

    // Send message to Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    if (!telegramResponse.ok) {
      const error = await telegramResponse.text();
      console.error('Telegram API error:', error);
      throw new Error('Failed to send message to Telegram');
    }

    return res.status(200).json({ 
      success: true, 
      message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' 
    });

  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ 
      success: false, 
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞' 
    });
  }
} 